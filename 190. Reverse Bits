public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int ret = 0;
        int power = 31;
        while (n != 0) {
            ret += (n & 1) << power;
            n >>>= 1; // Use unsigned shift right for proper handling of the sign bit
            power -= 1;
        }
        return ret;
    }

    // Approach 2
    private final Map<Integer, Integer> cache = new HashMap<>();

    public int reverseByte(int byteVal) {
        if (cache.containsKey(byteVal)) {
            return cache.get(byteVal);
        }
        int value = (int) (((byteVal & 0xFF) * 0x0202020202L & 0x010884422010L) %
                1023);
        cache.put(byteVal, value);
        return value;
    }

    public int reverseBits(int n) {
        int ret = 0;
        int power = 24;
        while (n != 0) {
            ret += reverseByte(n & 0xff) << power;
            n >>>= 8; // Use unsigned right shift
            power -= 8;
        }
        // Handling the case where n is 0 from the start, to ensure the loop runs at
        // least once
        if (n == 0 && power == 24) {
            ret += reverseByte(n & 0xff) << power;
        }
        return ret;
    }

    // Approach 3
    public int reverseBits(int n) {
        // First step: swap the half parts of n
        n = (n >>> 16) | (n << 16);
        // Second step: swap each byte within the 16-bit halves
        n = ((n & 0xff00ff00) >>> 8) | ((n & 0x00ff00ff) << 8);
        // Third step: swap nibbles (4-bit sequences)
        n = ((n & 0xf0f0f0f0) >>> 4) | ((n & 0x0f0f0f0f) << 4);
        // Fourth step: swap each pair of bits
        n = ((n & 0xcccccccc) >>> 2) | ((n & 0x33333333) << 2);
        // Final step: swap adjacent bits
        n = ((n & 0xaaaaaaaa) >>> 1) | ((n & 0x55555555) << 1);
        return n;
    }
}
