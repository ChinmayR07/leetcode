class Solution {

    //Aproach 1
    public int findMin(int[] nums) {
        int low = 0, high = nums.length - 1;
        int res = Integer.MAX_VALUE;

        while(low <= high) {
            int mid = (low + high) / 2;

            if(nums[low] <= nums[high]) {
                res = Math.min(res, nums[low]);
                break;
            }
            if(nums[low] <= nums[mid]) {
                res = Math.min(res, nums[low]);
                low = mid + 1;
            }
            else {
                high = mid - 1;
                res = Math.min(res, nums[mid]);
            }
        }
        return res;
    }

    //Approach 2
    public int findMin(int[] nums) {
        int low = 0, high = nums.length - 1;
        int res = Integer.MAX_VALUE;

        while(low <= high) {
            int mid = (low + high) / 2;
            if(nums[low] <= nums[mid]) {
                res = Math.min(res, nums[low]);
                low = mid + 1;
            }
            else {
                high = mid - 1;
                res = Math.min(res, nums[mid]);
            }
        }
        return res;
    }
}
