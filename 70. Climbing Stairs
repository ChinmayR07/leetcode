public class Solution {

    //Brute Force - Recursion
    public int climbStairs(int n) {
        return climb_Stairs(0, n);
    }
    public int climb_Stairs(int i, int n) {
        if (i > n) {
            return 0;
        }
        if (i == n) {
            return 1;
        }
        return climb_Stairs(i + 1, n) + climb_Stairs(i + 2, n);
    }

    //Memoization
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return solve(n, dp);
    }

    private int solve(int n, int[] dp) {
        if (n < 0) return 0;
        if (n == 0) return 1;

        if (dp[n] != -1) return dp[n];

        dp[n] = solve(n - 1, dp) + solve(n - 2, dp);

        return dp[n];
    }

    //Tabulation
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return solve(n, dp);
    }

    private int solve(int n, int[] dp) {
        dp[0] = 1;
        dp[1] = 1;

        for(int i = 2; i<=n;i++) {
            dp[i] = dp[i-1] + dp[i-2];
        } 
        return dp[n];
    }

    //Space Optimisation
    public int climbStairs(int n) {
        return solve(n);
    }

    private int solve(int n) {
        int prev2 = 1;
        int prev = 1;

        for(int i = 2; i<=n;i++) {
            int curr = prev + prev2;
            prev2 = prev;
            prev = curr;
        } 
        return prev;
    }

}
