class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        //Brute Force Approach
        
        // Set<List<Integer>> st = new HashSet<>();

        // //check all possible triplets
        // for(int i = 0; i<nums.length; i++) {
        //     for(int j = i+1; j<nums.length; j++) {
        //         for(int k = j+1; k<nums.length; k++) {
        //             if(nums[i] + nums[j] + nums[k] == 0) {
        //                 List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
        //                 temp.sort(null);
        //                 st.add(temp);
        //             }
        //         }
        //     }
        // }
        
        // //Store the set elements in the answer
        // List<List<Integer>> res = new ArrayList<>(st);
        // return res;

        //Better Approach

        // Set<List<Integer>> st = new HashSet<>();

        // for(int i = 0; i<nums.length; i++) {
        //     Set<Integer> hashset = new HashSet<>();
        //     for(int j = i+1; j<nums.length; j++) {
        //         //Calculate the third element
        //         int third = -(nums[i] + nums[j]);

        //         //Find the element in the set
        //         if(hashset.contains(third)) {
        //             List<Integer> temp = Arrays.asList(nums[i], nums[j], third);
        //             temp.sort(null);
        //             st.add(temp);
        //         }
        //         hashset.add(nums[j]);
        //     }
        // }

        // //Store the set elements in the answer
        // List<List<Integer>> res = new ArrayList<>(st);
        // return res;

        //Optimal Approach
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);

        for (int i = 0; i < nums.length; i++) {
            //remove duplicates
            if(i != 0 && nums[i] == nums[i - 1]) continue;

            //moving 2 pointers
            int j = i + 1;
            int k = nums.length - 1;

            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0) j++;
                else if(sum > 0) k--;
                else {
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                    res.add(temp);
                    j++;
                    k--;
                    //skip the duplicates
                    while (j < k && nums[j] == nums[j - 1]) j++;
                    while (j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        return res;
    }
}
